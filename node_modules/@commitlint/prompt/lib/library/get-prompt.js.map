{"version":3,"sources":["../../src/library/get-prompt.js"],"names":["getPrompt","type","context","rules","settings","results","prompter","TypeError","prompt","removeAllListeners","command","catch","addListener","log","delimiter","show","enumRule","filter","emptyRule","mustBeEmpty","mayNotBeEmpty","mayBeEmpty","ui","redraw","done","Promise","resolve","caseRule","forceCaseFn","leadingBlankRule","forceLeadingBlankFn","maxLenghtRule","hasMaxLength","inputMaxLength","Infinity","headerLength","header","length","remainingHeaderLength","scope","subject","join","maxLength","Math","min","enums","forEach","enumSettings","enumerables","enumerable","description","action","parameters","text","onSubmit","input","yellow","bold","blue","exec","drawRemaining","colors","threshold","color","item","map","onKey","sanitized","event","value","cropped","slice","optional","required","multiline","grey"],"mappings":"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","file":"get-prompt.js","sourcesContent":["import chalk from 'chalk';\n\nimport enumRuleIsActive from './enum-rule-is-active';\nimport format from './format';\nimport getForcedCaseFn from './get-forced-case-fn';\nimport getForcedLeadingFn from './get-forced-leading-fn';\nimport getHasName from './get-has-name';\nimport meta from './meta';\n\nexport default getPrompt;\n\n/**\n * Get a cli prompt based on rule configuration\n * @param  {string} type     type of the data to gather\n * @param  {object} context     rules to parse\n * @return {object}          prompt instance\n */\nfunction getPrompt(type, context = {}) {\n\tconst {rules = [], settings = {}, results = {}, prompter} = context;\n\n\tif (typeof prompter !== 'function') {\n\t\tthrow new TypeError('Missing prompter function in getPrompt context');\n\t}\n\n\tconst prompt = prompter();\n\n\tif (typeof prompt.removeAllListeners !== 'function') {\n\t\tthrow new TypeError(\n\t\t\t'getPrompt: prompt.removeAllListeners is not a function'\n\t\t);\n\t}\n\n\tif (typeof prompt.command !== 'function') {\n\t\tthrow new TypeError('getPrompt: prompt.command is not a function');\n\t}\n\n\tif (typeof prompt.catch !== 'function') {\n\t\tthrow new TypeError('getPrompt: prompt.catch is not a function');\n\t}\n\n\tif (typeof prompt.addListener !== 'function') {\n\t\tthrow new TypeError('getPrompt: prompt.addListener is not a function');\n\t}\n\n\tif (typeof prompt.log !== 'function') {\n\t\tthrow new TypeError('getPrompt: prompt.log is not a function');\n\t}\n\n\tif (typeof prompt.delimiter !== 'function') {\n\t\tthrow new TypeError('getPrompt: prompt.delimiter is not a function');\n\t}\n\n\tif (typeof prompt.show !== 'function') {\n\t\tthrow new TypeError('getPrompt: prompt.show is not a function');\n\t}\n\n\tconst enumRule = rules.filter(getHasName('enum')).filter(enumRuleIsActive)[0];\n\n\tconst emptyRule = rules.filter(getHasName('empty'))[0];\n\n\tconst mustBeEmpty = emptyRule\n\t\t? emptyRule[1][0] > 0 && emptyRule[1][1] === 'always'\n\t\t: false;\n\n\tconst mayNotBeEmpty = emptyRule\n\t\t? emptyRule[1][0] > 0 && emptyRule[1][1] === 'never'\n\t\t: false;\n\n\tconst mayBeEmpty = !mayNotBeEmpty;\n\n\tif (mustBeEmpty) {\n\t\tprompt.removeAllListeners('keypress');\n\t\tprompt.removeAllListeners('client_prompt_submit');\n\t\tprompt.ui.redraw.done();\n\t\treturn Promise.resolve();\n\t}\n\n\tconst caseRule = rules.filter(getHasName('case'))[0];\n\n\tconst forceCaseFn = getForcedCaseFn(caseRule);\n\n\tconst leadingBlankRule = rules.filter(getHasName('leading-blank'))[0];\n\n\tconst forceLeadingBlankFn = getForcedLeadingFn(leadingBlankRule);\n\n\tconst maxLenghtRule = rules.filter(getHasName('max-length'))[0];\n\n\tconst hasMaxLength = maxLenghtRule && maxLenghtRule[1][0] > 0;\n\n\tconst inputMaxLength = hasMaxLength ? maxLenghtRule[1][1] : Infinity;\n\n\tconst headerLength = settings.header ? settings.header.length : Infinity;\n\n\tconst remainingHeaderLength = headerLength\n\t\t? headerLength -\n\t\t\t[\n\t\t\t\tresults.type,\n\t\t\t\tresults.scope,\n\t\t\t\tresults.scope ? '()' : '',\n\t\t\t\tresults.type && results.scope ? ':' : '',\n\t\t\t\tresults.subject\n\t\t\t].join('').length\n\t\t: Infinity;\n\n\tconst maxLength = Math.min(inputMaxLength, remainingHeaderLength);\n\n\treturn new Promise(resolve => {\n\t\t// Add the defined enums as sub commands if applicable\n\t\tif (enumRule) {\n\t\t\tconst [, [, , enums]] = enumRule;\n\n\t\t\tenums.forEach(enumerable => {\n\t\t\t\tconst enumSettings = (settings.enumerables || {})[enumerable] || {};\n\t\t\t\tprompt\n\t\t\t\t\t.command(enumerable)\n\t\t\t\t\t.description(enumSettings.description || '')\n\t\t\t\t\t.action(() => {\n\t\t\t\t\t\tprompt.removeAllListeners();\n\t\t\t\t\t\tprompt.ui.redraw.done();\n\t\t\t\t\t\treturn resolve(forceLeadingBlankFn(forceCaseFn(enumerable)));\n\t\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tprompt.catch('[text...]').action(parameters => {\n\t\t\t\tconst {text = ''} = parameters;\n\t\t\t\tprompt.removeAllListeners();\n\t\t\t\tprompt.ui.redraw.done();\n\t\t\t\treturn resolve(forceLeadingBlankFn(forceCaseFn(text.join(' '))));\n\t\t\t});\n\t\t}\n\n\t\tif (mayBeEmpty) {\n\t\t\t// Add an easy exit command\n\t\t\tprompt\n\t\t\t\t.command(':skip')\n\t\t\t\t.description('Skip the input if possible.')\n\t\t\t\t.action(() => {\n\t\t\t\t\tprompt.removeAllListeners();\n\t\t\t\t\tprompt.ui.redraw.done();\n\t\t\t\t\tresolve('');\n\t\t\t\t});\n\t\t}\n\n\t\t// Handle empty input\n\t\tconst onSubmit = input => {\n\t\t\tif (input.length > 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Show help if enum is defined and input may not be empty\n\t\t\tif (mayNotBeEmpty) {\n\t\t\t\tprompt.ui.log(chalk.yellow(`⚠ ${chalk.bold(type)} may not be empty.`));\n\t\t\t}\n\n\t\t\tif (mayBeEmpty) {\n\t\t\t\tprompt.ui.log(\n\t\t\t\t\tchalk.blue(\n\t\t\t\t\t\t`ℹ Enter ${chalk.bold(':skip')} to omit ${chalk.bold(type)}.`\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (enumRule) {\n\t\t\t\tprompt.exec('help');\n\t\t\t}\n\t\t};\n\n\t\tconst drawRemaining = length => {\n\t\t\tif (length < Infinity) {\n\t\t\t\tconst colors = [\n\t\t\t\t\t{\n\t\t\t\t\t\tthreshold: 5,\n\t\t\t\t\t\tcolor: 'red'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tthreshold: 10,\n\t\t\t\t\t\tcolor: 'yellow'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tthreshold: Infinity,\n\t\t\t\t\t\tcolor: 'grey'\n\t\t\t\t\t}\n\t\t\t\t];\n\n\t\t\t\tconst color = colors\n\t\t\t\t\t.filter(item => {\n\t\t\t\t\t\treturn item.threshold >= length;\n\t\t\t\t\t})\n\t\t\t\t\t.map(item => item.color)[0];\n\n\t\t\t\tprompt.ui.redraw(chalk[color](`${length} characters left`));\n\t\t\t}\n\t\t};\n\n\t\tconst onKey = event => {\n\t\t\tconst sanitized = forceCaseFn(event.value);\n\t\t\tconst cropped = sanitized.slice(0, maxLength);\n\n\t\t\t// We **could** do live editing, but there are some quirks to solve\n\t\t\t/* const live = merge({}, results, {\n\t\t\t\t[type]: cropped\n\t\t\t});\n\t\t\tprompt.ui.redraw(`\\n\\n${format(live, true)}\\n\\n`); */\n\n\t\t\tif (maxLength) {\n\t\t\t\tdrawRemaining(maxLength - cropped.length);\n\t\t\t}\n\t\t\tprompt.ui.input(cropped);\n\t\t};\n\n\t\tprompt.addListener('keypress', onKey);\n\t\tprompt.addListener('client_prompt_submit', onSubmit);\n\n\t\tprompt.log(\n\t\t\t`\\n\\nPlease enter a ${chalk.bold(type)}: ${meta({\n\t\t\t\toptional: !mayNotBeEmpty,\n\t\t\t\trequired: mayNotBeEmpty,\n\t\t\t\t'tab-completion': typeof enumRule !== 'undefined',\n\t\t\t\theader: typeof settings.header !== 'undefined',\n\t\t\t\t'multi-line': settings.multiline\n\t\t\t})}`\n\t\t);\n\n\t\tif (settings.description) {\n\t\t\tprompt.log(chalk.grey(`${settings.description}\\n`));\n\t\t}\n\n\t\tprompt.log(`\\n\\n${format(results, true)}\\n\\n`);\n\n\t\tdrawRemaining(maxLength);\n\n\t\tprompt.delimiter(`❯ ${type}:`).show();\n\t});\n}\n"]}